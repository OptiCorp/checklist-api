// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobDeMob.Infrastructure;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ModelContextBase))]
    [Migration("20240325120330_removedAuditableFromQuestionTemplate")]
    partial class removedAuditableFromQuestionTemplate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ChecklistAggregate.Checklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistCollectionId");

                    b.HasIndex("ChecklistTemplateId");

                    b.HasIndex("ItemId", "ChecklistCollectionId")
                        .IsUnique();

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistAggregate.ChecklistQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("ChecklistQuestions", t =>
                        {
                            t.HasCheckConstraint("CK_ChecklistQuestions_CheckedNotApplicable", "([Checked] = 1 AND [NotApplicable] = 0) OR ([Checked] = 0 AND [NotApplicable] = 1) OR ([Checked] = 0 AND [NotApplicable] = 0)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.ChecklistTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemTemplateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId")
                        .IsUnique();

                    b.ToTable("ChecklistTemplates");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemTemplateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Entities.Punch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.ToTable("Punches");
                });

            modelBuilder.Entity("Domain.Entities.PunchFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("PunchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PunchId");

                    b.ToTable("PunchFiles");
                });

            modelBuilder.Entity("Domain.Entities.TemplateAggregate.QuestionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTemplateId");

                    b.ToTable("QuestionTemplates");
                });

            modelBuilder.Entity("MobDeMob.Domain.Entities.ChecklistAggregate.ChecklistCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChecklistCollections");
                });

            modelBuilder.Entity("MobDeMob.Domain.Entities.Mobilization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistCollectionId")
                        .IsUnique();

                    b.ToTable("Mobilizations");
                });

            modelBuilder.Entity("MobDeMob.Domain.ItemAggregate.ItemTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ItemTemplates");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistAggregate.Checklist", b =>
                {
                    b.HasOne("MobDeMob.Domain.Entities.ChecklistAggregate.ChecklistCollection", null)
                        .WithMany("Checklists")
                        .HasForeignKey("ChecklistCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ChecklistTemplate", "ChecklistTemplate")
                        .WithMany()
                        .HasForeignKey("ChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChecklistTemplate");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistAggregate.ChecklistQuestion", b =>
                {
                    b.HasOne("Domain.Entities.ChecklistAggregate.Checklist", null)
                        .WithMany("Questions")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TemplateAggregate.QuestionTemplate", "QuestionTemplate")
                        .WithMany()
                        .HasForeignKey("QuestionTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionTemplate");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistTemplate", b =>
                {
                    b.HasOne("MobDeMob.Domain.ItemAggregate.ItemTemplate", "ItemTemplate")
                        .WithOne("ChecklistTemplate")
                        .HasForeignKey("Domain.Entities.ChecklistTemplate", "ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");
                });

            modelBuilder.Entity("Domain.Entities.Item", b =>
                {
                    b.HasOne("MobDeMob.Domain.ItemAggregate.ItemTemplate", "ItemTemplate")
                        .WithMany("Items")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");
                });

            modelBuilder.Entity("Domain.Entities.Punch", b =>
                {
                    b.HasOne("Domain.Entities.ChecklistAggregate.Checklist", "Checklist")
                        .WithMany("Punches")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("Domain.Entities.PunchFile", b =>
                {
                    b.HasOne("Domain.Entities.Punch", null)
                        .WithMany("PunchFiles")
                        .HasForeignKey("PunchId");
                });

            modelBuilder.Entity("Domain.Entities.TemplateAggregate.QuestionTemplate", b =>
                {
                    b.HasOne("Domain.Entities.ChecklistTemplate", null)
                        .WithMany("Questions")
                        .HasForeignKey("ChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobDeMob.Domain.Entities.Mobilization", b =>
                {
                    b.HasOne("MobDeMob.Domain.Entities.ChecklistAggregate.ChecklistCollection", "ChecklistCollection")
                        .WithOne("Mobilization")
                        .HasForeignKey("MobDeMob.Domain.Entities.Mobilization", "ChecklistCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistCollection");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistAggregate.Checklist", b =>
                {
                    b.Navigation("Punches");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.ChecklistTemplate", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Punch", b =>
                {
                    b.Navigation("PunchFiles");
                });

            modelBuilder.Entity("MobDeMob.Domain.Entities.ChecklistAggregate.ChecklistCollection", b =>
                {
                    b.Navigation("Checklists");

                    b.Navigation("Mobilization")
                        .IsRequired();
                });

            modelBuilder.Entity("MobDeMob.Domain.ItemAggregate.ItemTemplate", b =>
                {
                    b.Navigation("ChecklistTemplate");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
